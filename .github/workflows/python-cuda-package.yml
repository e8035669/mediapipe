# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "cuda_support" ]
  pull_request:
    branches: [ "cuda_support" ]

jobs:
  build:

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.9", "3.10", "3.11"]
        python-version: ["3.10", "3.11"]
        cuda-version: ["12.1.0"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up cuda-toolkit ${{ matrix.cuda-version }}
      uses: Jimver/cuda-toolkit@v0.2.11
      id: cuda-toolkit
      with:
        cuda: ${{ matrix.cuda-version }}
        method: 'network'
        sub-packages: '["toolkit", "cupti-dev"]'

    - name: Install dependencies
      run: |
        df -h
        sudo apt-get install -y libcudnn8-dev
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/
        df -h
        python -m pip --no-cache-dir install --upgrade pip
        python -m pip --no-cache-dir install wheel
        if [ -f requirements.txt ]; then pip --no-cache-dir install -r requirements.txt; fi
    - uses: bazelbuild/setup-bazelisk@v2
    - name: Install protoc
      run: |
        curl -L -o protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v23.4/protoc-23.4-linux-x86_64.zip"
        sudo unzip protoc.zip -d /usr
        rm protoc.zip
        protoc
#     - name: Edit file
#       run: |
#         sed 's/^__version__.*/__version__\ =\ "0.10.2"/g' setup.py

    - name: Build package
      run: |
        MEDIAPIPE_DISABLE_GPU=0 python setup.py bdist_wheel
    - uses: actions/upload-artifact@v3
      with:
        name: my-artifact ${{ matrix.python-version }} ${{ matrix.cuda-version }}
        path: dist/mediapipe*.whl

